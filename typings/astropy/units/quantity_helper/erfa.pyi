from . import UFUNC_HELPERS as UFUNC_HELPERS
from .helpers import _d as _d, get_converter as get_converter, helper_invariant as helper_invariant, helper_multiplication as helper_multiplication, helper_twoarg_invariant as helper_twoarg_invariant
from _typeshed import Incomplete
from astropy.units.core import dimensionless_unscaled as dimensionless_unscaled
from astropy.units.errors import UnitTypeError as UnitTypeError, UnitsError as UnitsError
from astropy.units.structured import StructuredUnit as StructuredUnit

erfa_ufuncs: Incomplete

def has_matching_structure(unit, dtype): ...
def check_structured_unit(unit, dtype) -> None: ...
def helper_s2c(f, unit1, unit2): ...
def helper_s2p(f, unit1, unit2, unit3): ...
def helper_c2s(f, unit1): ...
def helper_p2s(f, unit1): ...
def helper_gc2gd(f, nounit, unit1): ...
def helper_gc2gde(f, unit_r, unit_flat, unit_xyz): ...
def helper_gd2gc(f, nounit, unit1, unit2, unit3): ...
def helper_gd2gce(f, unit_r, unit_flat, unit_long, unit_lat, unit_h): ...
def helper_p2pv(f, unit1): ...
def helper_pv2p(f, unit1): ...
def helper_pv2s(f, unit_pv): ...
def helper_s2pv(f, unit_theta, unit_phi, unit_r, unit_td, unit_pd, unit_rd): ...
def helper_pv_multiplication(f, unit1, unit2): ...
def helper_pvm(f, unit1): ...
def helper_pvstar(f, unit1): ...
def helper_starpv(f, unit_ra, unit_dec, unit_pmr, unit_pmd, unit_px, unit_rv): ...
def helper_pvtob(f, unit_elong, unit_phi, unit_hm, unit_xp, unit_yp, unit_sp, unit_theta): ...
def helper_pvu(f, unit_t, unit_pv): ...
def helper_pvup(f, unit_t, unit_pv): ...
def helper_s2xpv(f, unit1, unit2, unit_pv): ...
def ldbody_unit(): ...
def astrom_unit(): ...
def helper_ldn(f, unit_b, unit_ob, unit_sc): ...
def helper_aper(f, unit_theta, unit_astrom): ...
def helper_apio(f, unit_sp, unit_theta, unit_elong, unit_phi, unit_hm, unit_xp, unit_yp, unit_refa, unit_refb): ...
def helper_atciq(f, unit_rc, unit_dc, unit_pr, unit_pd, unit_px, unit_rv, unit_astrom): ...
def helper_atciqn(f, unit_rc, unit_dc, unit_pr, unit_pd, unit_px, unit_rv, unit_astrom, unit_b): ...
def helper_atciqz_aticq(f, unit_rc, unit_dc, unit_astrom): ...
def helper_aticqn(f, unit_rc, unit_dc, unit_astrom, unit_b): ...
def helper_atioq(f, unit_rc, unit_dc, unit_astrom): ...
def helper_atoiq(f, unit_type, unit_ri, unit_di, unit_astrom): ...
def get_erfa_helpers(): ...
