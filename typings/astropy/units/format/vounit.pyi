import numpy as np
from . import core as core, utils as utils
from .fits import FITS as FITS
from astropy.extern.ply.lex import LexToken as LexToken
from astropy.units import NamedUnit as NamedUnit, UnitBase as UnitBase
from astropy.units.errors import UnitParserWarning as UnitParserWarning, UnitScaleError as UnitScaleError, UnitsError as UnitsError
from astropy.utils import classproperty as classproperty
from re import Pattern
from typing import ClassVar, Literal

class VOUnit(FITS):
    """
    The IVOA standard for units used by the VO.

    This is an implementation of `Units in the VO 1.0
    <http://www.ivoa.net/documents/VOUnits/>`_.
    """
    _explicit_custom_unit_regex: ClassVar[Pattern[str]]
    _custom_unit_regex: ClassVar[Pattern[str]]
    _custom_units: ClassVar[dict[str, UnitBase]]
    _space: ClassVar[str]
    _scale_unit_separator: ClassVar[str]
    def _all_units(cls) -> tuple[dict[str, UnitBase], frozenset[str]]: ...
    def _units(cls) -> dict[str, UnitBase]: ...
    def _deprecated_units(cls) -> frozenset[str]: ...
    @classmethod
    def parse(cls, s: str, debug: bool = False) -> UnitBase: ...
    @classmethod
    def _get_unit(cls, t: LexToken) -> UnitBase: ...
    @classmethod
    def _parse_unit(cls, unit: str, detailed_exception: bool = True) -> UnitBase: ...
    @classmethod
    def _validate_unit(cls, unit: str, detailed_exception: bool = True) -> None: ...
    @classmethod
    def _get_unit_name(cls, unit: NamedUnit) -> str: ...
    @classmethod
    def _def_custom_unit(cls, unit: str) -> UnitBase: ...
    @classmethod
    def _format_superscript(cls, number: str) -> str: ...
    @classmethod
    def format_exponential_notation(cls, val: float | np.number, format_spec: str = '.8g') -> str: ...
    @classmethod
    def _format_inline_fraction(cls, scale: str, numerator: str, denominator: str) -> str: ...
    @classmethod
    def to_string(cls, unit: UnitBase, fraction: bool | Literal['inline'] = False) -> str: ...
    @classmethod
    def _fix_deprecated(cls, x: str) -> list[str]: ...
    @classmethod
    def _try_decomposed(cls, unit: UnitBase) -> str: ...
