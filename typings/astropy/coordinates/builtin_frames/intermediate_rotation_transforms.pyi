from .cirs import CIRS as CIRS
from .equatorial import TEME as TEME, TETE as TETE
from .gcrs import GCRS as GCRS, PrecessedGeocentric as PrecessedGeocentric
from .icrs import ICRS as ICRS
from .itrs import ITRS as ITRS
from .utils import get_jd12 as get_jd12, get_polar_motion as get_polar_motion
from _typeshed import Incomplete
from astropy.coordinates.baseframe import frame_transform_graph as frame_transform_graph
from astropy.coordinates.matrix_utilities import matrix_transpose as matrix_transpose
from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference as FunctionTransformWithFiniteDifference

def teme_to_itrs_mat(time): ...
def gcrs_to_cirs_mat(time): ...
def cirs_to_itrs_mat(time): ...
def tete_to_itrs_mat(time, rbpn: Incomplete | None = None):
    """Compute the polar motion p-matrix at the given time.

    If the nutation-precession matrix is already known, it should be passed in,
    as this is by far the most expensive calculation.
    """
def gcrs_precession_mat(equinox): ...
def get_location_gcrs(location, obstime, ref_to_itrs, gcrs_to_ref):
    """Create a GCRS frame at the location and obstime.

    The reference frame z axis must point to the Celestial Intermediate Pole
    (as is the case for CIRS and TETE).

    This function is here to avoid location.get_gcrs(obstime), which would
    recalculate matrices that are already available below (and return a GCRS
    coordinate, rather than a frame with obsgeoloc and obsgeovel).  Instead,
    it uses the private method that allows passing in the matrices.

    """
def gcrs_to_tete(gcrs_coo, tete_frame): ...
def tete_to_gcrs(tete_coo, gcrs_frame): ...
def tete_to_itrs(tete_coo, itrs_frame): ...
def itrs_to_tete(itrs_coo, tete_frame): ...
def gcrs_to_cirs(gcrs_coo, cirs_frame): ...
def cirs_to_gcrs(cirs_coo, gcrs_frame): ...
def cirs_to_itrs(cirs_coo, itrs_frame): ...
def itrs_to_cirs(itrs_coo, cirs_frame): ...
def gcrs_to_precessedgeo(from_coo, to_frame): ...
def precessedgeo_to_gcrs(from_coo, to_frame): ...
def teme_to_itrs(teme_coo, itrs_frame): ...
def itrs_to_teme(itrs_coo, teme_frame): ...
