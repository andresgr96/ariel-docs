:py:mod:`amphiteater_heightmap`
==================================================

.. py:module:: ariel.environments.amphiteater_heightmap


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ariel.environments.amphiteater_heightmap.AmphitheatreTerrainWorld




Attributes
~~~~~~~~~~

.. autoapisummary::

   ariel.environments.amphiteater_heightmap.USE_DEGREES
   ariel.environments.amphiteater_heightmap.TERRAIN_COLOR


.. py:data:: USE_DEGREES
   :value: False


.. py:data:: TERRAIN_COLOR
   :value: [0.5, 0.4, 0.3, 1.0]


.. py:class:: AmphitheatreTerrainWorld(size: Tuple[float, float] = (10.0, 10.0), resolution: int = 128, ring_inner_radius: float = 0.2, ring_outer_radius: float = 0.45, cone_height: float = 1.0, ruggedness: float = 0.05, height: float = 3.0)

   MuJoCo world with an amphitheater-shaped terrain.


   .. py:attribute:: size
      :value: (10.0, 10.0)



   .. py:attribute:: resolution
      :value: 128



   .. py:attribute:: ring_inner_radius
      :value: 0.2



   .. py:attribute:: ring_outer_radius
      :value: 0.45



   .. py:attribute:: cone_height
      :value: 1.0



   .. py:attribute:: ruggedness
      :value: 0.05



   .. py:attribute:: height
      :value: 3.0



   .. py:attribute:: heightmap


   .. py:attribute:: spec


   .. py:method:: spawn(mj_spec: mujoco.MjSpec, spawn_position: list[float] | None = None, *, small_gap: float = 0.0, correct_for_bounding_box: bool = True) -> None

      Spawn a robot inside the amphitheater world.

      :param mj_spec: The MuJoCo specification for the robot.
      :type mj_spec: mujoco.MjSpec
      :param spawn_position: Optional spawn position in the world. If None, defaults to [0, 0, 0].
      :type spawn_position: list[float] | None
      :param small_gap: Small gap to avoid collision with the terrain.
      :type small_gap: float
      :param correct_for_bounding_box: Whether to adjust the spawn position based on the bounding box.
      :type correct_for_bounding_box: bool



