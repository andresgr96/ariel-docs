:py:mod:`cpg_with_sensory_feedback`
=====================================================

.. py:module:: ariel.controllers.cpg_with_sensory_feedback

.. autoapi-nested-parse::

   CPG model with attached sensory feedback.

   Date:       2025-05-29
   Status:     In progress ⚙️

   Sources:
   -------
       [1] DOI: 10.5772/59186

   .. rubric:: Notes

   *

   .. todo:: [ ] Add targeted locomotion



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ariel.controllers.cpg_with_sensory_feedback.CPGSensoryFeedback




Attributes
~~~~~~~~~~

.. autoapisummary::

   ariel.controllers.cpg_with_sensory_feedback.SEED
   ariel.controllers.cpg_with_sensory_feedback.RNG


.. py:data:: SEED
   :value: 42


.. py:data:: RNG

.. py:class:: CPGSensoryFeedback(num_neurons: int, dt: float = 0.002, coupling_weights: numpy.ndarray | None = None, sensory_term: float = 0.0, _lambda: float = 0.1)

   .. py:attribute:: num_neurons


   .. py:attribute:: dt
      :value: 0.002



   .. py:attribute:: sensory_term
      :value: 0.0



   .. py:attribute:: x


   .. py:attribute:: y


   .. py:attribute:: omega


   .. py:attribute:: amplitude


   .. py:method:: step() -> tuple[numpy.ndarray[tuple[int, Ellipsis], numpy.dtype[Any]], numpy.ndarray[tuple[int, Ellipsis], numpy.dtype[Any]]]

      Perform a single step of the CPG dynamics.

      :returns: * **x** (*np.ndarray[tuple[int, ...], np.dtype[Any]]*) -- The x state of the CPG neurons after the step.
                * **y** (*np.ndarray[tuple[int, ...], np.dtype[Any]]*) -- The y state of the CPG neurons after the step.



   .. py:method:: reset() -> None


   .. py:method:: simulate(steps: int) -> tuple[numpy.ndarray[tuple[int, Ellipsis], numpy.dtype[Any]], numpy.ndarray[tuple[int, Ellipsis], numpy.dtype[Any]]]

      Run the CPG simulation for a given number of steps.

      :param steps: The number of simulation steps to perform.
      :type steps: int

      :returns: * **x_history** (*np.ndarray[tuple[int, ...], np.dtype[Any]]*) -- History of x states over the simulation.
                * **y_history** (*np.ndarray[tuple[int, ...], np.dtype[Any]]*) -- History of y states over the simulation.



